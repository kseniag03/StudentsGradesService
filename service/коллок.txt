4. API для управления студентами и оценками

- `GET /students`: Получение списка всех студентов. Ответ должен включать имя студента, возраст и специальность.
- `POST /students`: Добавление нового студента. Запрос должен включать имя, возраст и специальность студента.
- `GET /grades/{studentId}`: Получение оценок конкретного студента. Ответ должен включать предмет и оценку.
- `POST /grades`: Выставление оценки студенту. Запрос должен включать ID студента, предмет и оценку.


## Критерии
1. Работоспособное приложение (4 балла)
    1. Приложение должно запускаться без ошибок и содержать все методы
2. Код-стайл для выбранного языка (1 балл)
    1. Код должен соответствовать выбранному языку программирования и соблюдать установленные стандарты форматирования. Применение хороших практик именования переменных, функций и классов.
3. Валидация входных данных (1 балл)
    1. Входные данные должны быть проверены на корректность и соответствие требуемым форматам и типам данных. Обработка ошибок в случае невалидных данных. 
4. Разделение на слои (2 балла)
    1. Приложение должно быть разделено на слои с четкими зонами ответственности, такими как сервисы, контроллеры, модели и т.д. Архитектура должна быть логически согласованной 
5. Документация  (2 балла)
    1. README файл, содержащий инструкции по установке, запуску и использованию приложения — 1 балл
    2. Использование инструментов для автоматической генерации документации, таких как Postman или Swagger, для описания доступных эндпоинтов и параметров запросов — 1 балл

Важно! Критерий 1. является блокирующим, т.е. если приложение не запускается и не содержит всех методов, то за работу ставится 0 баллов.